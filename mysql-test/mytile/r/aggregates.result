#
# The purpose of this test is to test aggregates
#
set mytile_enable_aggregate_pushdown=1;
CREATE TABLE dense ENGINE=mytile uri='MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_dense';;
DESCRIBE dense;
Field	Type	Null	Key	Default	Extra
rows	int(11)	NO	PRI	NULL	
cols	int(11)	NO	PRI	NULL	
a	int(11)	NO		-2147483648	
select AVG(a) from dense;
AVG(a)
8.5000
select SUM(a) from dense;
SUM(a)
136
select MAX(a) from dense;
MAX(a)
16
select MIN(a) from dense;
MIN(a)
1
select COUNT(a) from dense;
COUNT(a)
16
select SUM(d.cols) from dense as d;
SUM(d.cols)
40
select AVG(d.cols) from dense as d;
AVG(d.cols)
2.5000
select MAX(d.cols) from dense as d;
MAX(d.cols)
4
select AVG(`cols`) from dense;
AVG(`cols`)
2.5000
set mytile_delete_arrays=0;
DROP TABLE dense;
set mytile_delete_arrays=1;
CREATE TABLE types (
dim0 int dimension=1 tile_extent="10",
attr0 bigint NOT NULL,
attr1 float NOT NULL
) ENGINE=mytile;
INSERT INTO types VALUES (0, 0, 1.2), (1, 1, 1.3), (2, 2, 1.4), (3, 3, 1.5), (4, 5, 1.6), (5, 7, 1.7), (6, 1, 1.8);
SELECT * FROM types;
dim0	attr0	attr1
0	0	1.2
1	1	1.3
2	2	1.4
3	3	1.5
4	5	1.6
5	7	1.7
6	1	1.8
select SUM(attr0) from types;
SUM(attr0)
19
select MAX(attr0) from types;
MAX(attr0)
7
select MIN(attr0) from types;
MIN(attr0)
0
select AVG(attr0) from types;
AVG(attr0)
2.7143
select COUNT(attr0) from types;
COUNT(attr0)
7
select SUM(attr1) from types;
SUM(attr1)
10.5
select MAX(attr1) from types;
MAX(attr1)
1.8
select MIN(attr1) from types;
MIN(attr1)
1.2
select AVG(attr1) from types;
AVG(attr1)
1.5
select COUNT(attr1) from types;
COUNT(attr1)
7
DROP TABLE types;
CREATE TABLE strings (
column1 int dimension=1 lower_bound="0" upper_bound="100" tile_extent="10",
column2 varchar(20)
) ENGINE=mytile;
INSERT INTO strings VALUES (1, "Apple"), (2, "Orange"), (3, "Melon"), (4, "Strawberry");
select MAX(column2) FROM strings;
MAX(column2)
Strawberry
select MIN(column2) FROM strings;
MIN(column2)
Apple
DROP TABLE strings;
CREATE TABLE nulls (
dim0 int dimension=1 tile_extent="10",
attr0 bigint NULL,
attr1 float
) ENGINE=mytile;
INSERT INTO nulls VALUES (0, 0, 1.2), (1, null, 1.3), (2, 2, 1.4), (3, null, 1.5), (4, 14, 1.6), (5, null, 1.7), (6, 32, 1.8);
SELECT * FROM nulls;
dim0	attr0	attr1
0	0	1.2
1	NULL	1.3
2	2	1.4
3	NULL	1.5
4	14	1.6
5	NULL	1.7
6	32	1.8
select SUM(attr0) from nulls;
SUM(attr0)
48
select MAX(attr0) from nulls;
MAX(attr0)
32
select MIN(attr0) from nulls;
MIN(attr0)
0
SELECT AVG(attr0) from nulls;
AVG(attr0)
12.0000
SELECT AVG(attr1) from nulls;
AVG(attr1)
1.5
select SUM(attr1) from nulls;
SUM(attr1)
10.5
DROP TABLE nulls;
CREATE TABLE dense ENGINE=mytile uri='MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_dense';;
select * from dense;
rows	cols	a
1	1	1
1	2	2
1	3	3
1	4	4
2	1	5
2	2	6
2	3	7
2	4	8
3	1	9
3	2	10
3	3	11
3	4	12
4	1	13
4	2	14
4	3	15
4	4	16
SELECT AVG(a) as AVERAGE1 from dense;
AVERAGE1
8.5000
SELECT AVG(a) as AVERAGE2 from dense where cols=4;
AVERAGE2
10.0000
SELECT AVG(a) as AVERAGE3 from dense where `a` > 10;
AVERAGE3
13.5000
SELECT SUM(a) as SUMMATION1 from dense;
SUMMATION1
136
SELECT SUM(a) as SUMMATION2 from dense where cols=4;
SUMMATION2
40
SELECT MIN(a) as MINIMUM1 from dense;
MINIMUM1
1
SELECT MIN(a) as MINIMUM2 from dense where cols=4;
MINIMUM2
4
SELECT MIN(a) as MINIMUM3 from dense where `a` > 10;
MINIMUM3
11
SELECT MAX(a) as MAXIMUM1 from dense;
MAXIMUM1
16
SELECT MAX(a) as MAXIMUM2 from dense where cols=3;
MAXIMUM2
15
SELECT MAX(a) as MAXIMUM3 from dense where `a` > 10;
MAXIMUM3
16
SELECT AVG(a), MIN(a), MAX(a) from dense where a > 3;
AVG(a)	MIN(a)	MAX(a)
10.0000	4	16
SELECT COUNT(a) from dense where a > 3;
COUNT(a)
13
SELECT COUNT(a) from dense where a > 3 and cols > 1;
COUNT(a)
10
SELECT SUM(a) from dense where a > 3 and `cols` > 3;
SUM(a)
40
SELECT AVG(a), `cols` ,MAX(a) from dense where a > 3;
AVG(a)	cols	MAX(a)
10.0000	NULL	16
CREATE TABLE sparse ENGINE=mytile uri='MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_sparse';;
select * from sparse;
rows	cols	a
1	1	1
2	3	3
2	4	2
SELECT AVG(a), SUM(a), COUNT(a), MIN(a), MAX(a) from sparse where a > 1;
AVG(a)	SUM(a)	COUNT(a)	MIN(a)	MAX(a)
2.5000	5	2	2	3
SELECT SUM(a) from sparse where a = 2 and `rows` > 1;
SUM(a)
2
SELECT AVG(a), `cols` ,MAX(a) from sparse where a > 1;
AVG(a)	cols	MAX(a)
2.5000	NULL	3
set mytile_delete_arrays=0;
DROP TABLE sparse;
DROP TABLE dense;
set mytile_delete_arrays=1;
CREATE TABLE encr (
dim1 integer dimension=1 lower_bound="0" upper_bound="100" tile_extent="10",
attr1 integer NOT NULL
) ENGINE=mytile encryption_key="testtesttesttesttesttesttesttest";
INSERT INTO encr VALUES (1,1), (2,2), (3,3), (4,4), (5,5);
select SUM(attr1) FROM encr;
SUM(attr1)
15
DROP TABLE encr;
CREATE TABLE dense ENGINE=mytile uri='MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_dense';;
select * from dense one JOIN dense two USING(a);
a	rows	cols	rows	cols
1	1	1	1	1
2	1	2	1	2
3	1	3	1	3
4	1	4	1	4
5	2	1	2	1
6	2	2	2	2
7	2	3	2	3
8	2	4	2	4
9	3	1	3	1
10	3	2	3	2
11	3	3	3	3
12	3	4	3	4
13	4	1	4	1
14	4	2	4	2
15	4	3	4	3
16	4	4	4	4
select * from dense one JOIN dense two USING(a) where one.a > 10;
a	rows	cols	rows	cols
11	3	3	3	3
12	3	4	3	4
13	4	1	4	1
14	4	2	4	2
15	4	3	4	3
16	4	4	4	4
select SUM(a) from dense one JOIN dense two USING(a) where one.a > 10;
SUM(a)
81
select AVG(a) from dense one JOIN dense two USING(a) where one.a > 10;
AVG(a)
13.5000
select COUNT(a) from dense one JOIN dense two USING(a) where one.a > 10;
COUNT(a)
6
select MIN(a) from dense one JOIN dense two USING(a) where one.a > 10;
MIN(a)
11
select MIN(a), MAX(a) from dense one JOIN dense two USING(a) where one.a > 10;
MIN(a)	MAX(a)
11	16
set mytile_delete_arrays=0;
DROP TABLE dense;
set mytile_delete_arrays=1;
