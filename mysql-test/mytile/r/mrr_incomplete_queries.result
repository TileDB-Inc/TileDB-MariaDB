#
# The purpose of this test is to validate the MRR functionality with incomplete TileDB queries
#
SET mytile_mrr_support=1;
set mytile_read_buffer_size=16;
CREATE TABLE quickstart_dense ENGINE=mytile uri='MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_dense';;
CREATE TABLE quickstart_sparse ENGINE=mytile uri='MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_sparse';;
# Block Nested Loop Join Explain
explain select * from `quickstart_dense` a JOIN `quickstart_dense` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	PRIMARY	NULL	NULL	NULL	100000	Using filesort
1	SIMPLE	b	eq_ref	PRIMARY	PRIMARY	8	test.a.rows,test.a.cols	1	
# Batch Key Access (Sorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=on';
set join_cache_level=6;
explain select * from `quickstart_dense` a JOIN `quickstart_dense` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	PRIMARY	NULL	NULL	NULL	100000	Using temporary; Using filesort
1	SIMPLE	b	eq_ref	PRIMARY	PRIMARY	8	test.a.rows,test.a.cols	1	Using join buffer (flat, BKA join); Key-ordered scan
select * from `quickstart_dense` a JOIN `quickstart_dense` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
rows	cols	a	a
1	1	1	1
1	2	2	2
1	3	3	3
1	4	4	4
2	1	5	5
2	2	6	6
2	3	7	7
2	4	8	8
3	1	9	9
3	2	10	10
3	3	11	11
3	4	12	12
4	1	13	13
4	2	14	14
4	3	15	15
4	4	16	16
# Batch Key Access (Unsorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=off';
set join_cache_level=6;
explain select * from `quickstart_dense` a JOIN `quickstart_dense` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	PRIMARY	NULL	NULL	NULL	100000	Using temporary; Using filesort
1	SIMPLE	b	eq_ref	PRIMARY	PRIMARY	8	test.a.rows,test.a.cols	1	Using join buffer (flat, BKA join)
select * from `quickstart_dense` a JOIN `quickstart_dense` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
rows	cols	a	a
1	1	1	1
1	2	2	2
1	3	3	3
1	4	4	4
2	1	5	5
2	2	6	6
2	3	7	7
2	4	8	8
3	1	9	9
3	2	10	10
3	3	11	11
3	4	12	12
4	1	13	13
4	2	14	14
4	3	15	15
4	4	16	16
# Batch Key Access Hash (Sorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=on';
set join_cache_level=8;
explain select * from `quickstart_dense` a JOIN `quickstart_dense` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	PRIMARY	NULL	NULL	NULL	100000	Using temporary; Using filesort
1	SIMPLE	b	eq_ref	PRIMARY	PRIMARY	8	test.a.rows,test.a.cols	1	Using join buffer (flat, BKAH join); Key-ordered scan
select * from `quickstart_dense` a JOIN `quickstart_dense` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
rows	cols	a	a
1	1	1	1
1	2	2	2
1	3	3	3
1	4	4	4
2	1	5	5
2	2	6	6
2	3	7	7
2	4	8	8
3	1	9	9
3	2	10	10
3	3	11	11
3	4	12	12
4	1	13	13
4	2	14	14
4	3	15	15
4	4	16	16
# Batch Key Access (Unsorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=off';
set join_cache_level=6;
explain select * from `quickstart_dense` a JOIN `quickstart_sparse` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	PRIMARY	NULL	NULL	NULL	100000	Using temporary; Using filesort
1	SIMPLE	b	eq_ref	PRIMARY	PRIMARY	8	test.a.rows,test.a.cols	1	Using join buffer (flat, BKA join)
select * from `quickstart_dense` a JOIN `quickstart_sparse` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
rows	cols	a	a
1	1	1	1
2	3	7	3
2	4	8	2
set mytile_log_level='debug';
# Batch Key Access Hash (Unsorted) Join
set optimizer_switch='optimize_join_buffer_size=off,mrr=on,mrr_sort_keys=off';
set join_cache_level=8;
explain select * from `quickstart_dense` a JOIN `quickstart_sparse` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	a	ALL	PRIMARY	NULL	NULL	NULL	100000	Using temporary; Using filesort
1	SIMPLE	b	eq_ref	PRIMARY	PRIMARY	8	test.a.rows,test.a.cols	1	Using join buffer (flat, BKAH join)
select * from `quickstart_dense` a JOIN `quickstart_sparse` b USING(`rows`, `cols`) ORDER BY `rows` asc, cols asc;
rows	cols	a	a
1	1	1	1
2	3	7	3
2	4	8	2
set mytile_delete_arrays=0;
drop table `quickstart_dense`;
drop table `quickstart_sparse`;
SET mytile_mrr_support=0;
