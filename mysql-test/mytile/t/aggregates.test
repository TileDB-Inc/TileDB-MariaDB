--echo #
--echo # The purpose of this test is to test aggregates
--echo #

set mytile_enable_aggregate_pushdown=1;
##################################################################################
# Basic
--replace_result $MTR_SUITE_DIR MTR_SUITE_DIR
--eval CREATE TABLE dense ENGINE=mytile uri='$MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_dense';
DESCRIBE dense;
select AVG(a) from dense;
select SUM(a) from dense;
select MAX(a) from dense;
select MIN(a) from dense;
select COUNT(a) from dense;
select SUM(d.cols) from dense as d;
select AVG(d.cols) from dense as d;
select MAX(d.cols) from dense as d;

select AVG(`cols`) from dense; # is not pushed down because `cols` is a dimension

set mytile_delete_arrays=0;
DROP TABLE dense;
set mytile_delete_arrays=1;

##########################################################################3
# different types
CREATE TABLE types (
dim0 int dimension=1 tile_extent="10",
attr0 bigint NOT NULL,
attr1 float NOT NULL
) ENGINE=mytile;

INSERT INTO types VALUES (0, 0, 1.2), (1, 1, 1.3), (2, 2, 1.4), (3, 3, 1.5), (4, 5, 1.6), (5, 7, 1.7), (6, 1, 1.8);

SELECT * FROM types;
select SUM(attr0) from types;
select MAX(attr0) from types;
select MIN(attr0) from types;
select AVG(attr0) from types;
select COUNT(attr0) from types;

select SUM(attr1) from types;
select MAX(attr1) from types;
select MIN(attr1) from types;
select AVG(attr1) from types;
select COUNT(attr1) from types;
DROP TABLE types;

################################################################################
## Test queries on String attributes
CREATE TABLE strings (
  column1 int dimension=1 lower_bound="0" upper_bound="100" tile_extent="10",
  column2 varchar(20)
) ENGINE=mytile;

INSERT INTO strings VALUES (1, "Apple"), (2, "Orange"), (3, "Melon"), (4, "Strawberry");

select MAX(column2) FROM strings;
select MIN(column2) FROM strings;

DROP TABLE strings;

#################################################################################
# Nullable attributes
CREATE TABLE nulls (
dim0 int dimension=1 tile_extent="10",
attr0 bigint NULL,
attr1 float
) ENGINE=mytile;

INSERT INTO nulls VALUES (0, 0, 1.2), (1, null, 1.3), (2, 2, 1.4), (3, null, 1.5), (4, 14, 1.6), (5, null, 1.7), (6, 32, 1.8);

SELECT * FROM nulls;
select SUM(attr0) from nulls;
select MAX(attr0) from nulls;
select MIN(attr0) from nulls;
SELECT AVG(attr0) from nulls;

SELECT AVG(attr1) from nulls;
select SUM(attr1) from nulls;

DROP TABLE nulls;

#################################################################################
## Test aggregations with dim/attr filtering on dense/sparse arrays
--replace_result $MTR_SUITE_DIR MTR_SUITE_DIR
--eval CREATE TABLE dense ENGINE=mytile uri='$MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_dense';
select * from dense;

SELECT AVG(a) as AVERAGE1 from dense;
SELECT AVG(a) as AVERAGE2 from dense where cols=4;
SELECT AVG(a) as AVERAGE3 from dense where `a` > 10;

SELECT SUM(a) as SUMMATION1 from dense;
SELECT SUM(a) as SUMMATION2 from dense where cols=4;

SELECT MIN(a) as MINIMUM1 from dense;
SELECT MIN(a) as MINIMUM2 from dense where cols=4;
SELECT MIN(a) as MINIMUM3 from dense where `a` > 10;

SELECT MAX(a) as MAXIMUM1 from dense;
SELECT MAX(a) as MAXIMUM2 from dense where cols=3;
SELECT MAX(a) as MAXIMUM3 from dense where `a` > 10;

SELECT AVG(a), MIN(a), MAX(a) from dense where a > 3;
SELECT COUNT(a) from dense where a > 3;
SELECT COUNT(a) from dense where a > 3 and cols > 1;
SELECT SUM(a) from dense where a > 3 and `cols` > 3;
SELECT AVG(a), MAX(a) from dense where a > 3;

--replace_result $MTR_SUITE_DIR MTR_SUITE_DIR
--eval CREATE TABLE sparse ENGINE=mytile uri='$MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_sparse';
select * from sparse;

SELECT AVG(a), SUM(a), COUNT(a), MIN(a), MAX(a) from sparse where a > 1;
SELECT SUM(a) from sparse where a = 2 and `rows` > 1;
SELECT AVG(a), MAX(a) from sparse where a > 1;

set mytile_delete_arrays=0;
DROP TABLE sparse;
DROP TABLE dense;
set mytile_delete_arrays=1;

###############################################################################
## Test with encryption
CREATE TABLE encr (
  dim1 integer dimension=1 lower_bound="0" upper_bound="100" tile_extent="10",
  attr1 integer NOT NULL
) ENGINE=mytile encryption_key="testtesttesttesttesttesttesttest";
INSERT INTO encr VALUES (1,1), (2,2), (3,3), (4,4), (5,5);
select SUM(attr1) FROM encr;
DROP TABLE encr;

##############################################################################
## Test joins
#joins
--replace_result $MTR_SUITE_DIR MTR_SUITE_DIR
--eval CREATE TABLE dense ENGINE=mytile uri='$MTR_SUITE_DIR/test_data/tiledb_arrays/1.6/quickstart_dense';
select * from dense one JOIN dense two USING(a);
select * from dense one JOIN dense two USING(a) where one.a > 10;
select SUM(a) from dense one JOIN dense two USING(a) where one.a > 10;
select AVG(a) from dense one JOIN dense two USING(a) where one.a > 10;
select COUNT(a) from dense one JOIN dense two USING(a) where one.a > 10;
select MIN(a) from dense one JOIN dense two USING(a) where one.a > 10;
select MIN(a), MAX(a) from dense one JOIN dense two USING(a) where one.a > 10;
set mytile_delete_arrays=0;
DROP TABLE dense;
set mytile_delete_arrays=1;



